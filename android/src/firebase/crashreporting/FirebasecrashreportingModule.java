/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package firebase.crashreporting;

import org.appcelerator.kroll.KrollExceptionHandler;
import org.appcelerator.kroll.KrollExceptionHandler.ExceptionMessage;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollRuntime;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.common.TiMessenger;

import android.os.Message;

import com.google.firebase.crash.FirebaseCrash;

@Kroll.module(name = "Firebasecrashreporting", id = "firebase.crashreporting")
public class FirebasecrashreportingModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "FirebasecrashreportingModule";
	private static final boolean DBG = TiConfig.LOGD;
	final int MSG_KROLL_CRASH = 1000;

	public FirebasecrashreportingModule() {
		super();
	}

	public boolean handleMessage(Message msg) {
		switch (msg.what) {
		case MSG_KROLL_CRASH:
			AsyncResult asyncResult = (AsyncResult) msg.obj;
			ExceptionMessage errorMessage = (ExceptionMessage) asyncResult
					.getArg();
			handleKrollError(errorMessage);
			asyncResult.setResult(null);
			return true;
		default:
			break;
		}

		return false;
	}

	protected void handleKrollError(ExceptionMessage error) {
		FirebaseCrash.log(error.toString());
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");

	}

	// Methods
	@Kroll.method
	public void log(String msg) {
		FirebaseCrash.log(msg);
	}

	@Kroll.method
	public void startJSCrashReporting() {
		KrollExceptionHandler handler = new KrollExceptionHandler() {
			@Override
			public void handleException(ExceptionMessage error) {

				if (TiApplication.isUIThread()) {
					handleKrollError(error);
				} else {
					TiMessenger.sendBlockingMainMessage(
							mainHandler.obtainMessage(MSG_KROLL_CRASH), error);
				}
			}
		};
		KrollRuntime.addAdditionalExceptionHandler(handler, "myKEY");
	}

	@Kroll.method
	public void stopJSCrashReporting() {
		KrollRuntime.removeExceptionHandler("myKEY");
	}

	@Kroll.method
	public void startNativeCrashReporting() {
		FirebaseCrash.setCrashCollectionEnabled(true);
	}

	@Kroll.method
	public void stopNativeCrashReporting() {
		FirebaseCrash.setCrashCollectionEnabled(false);
	}

}
